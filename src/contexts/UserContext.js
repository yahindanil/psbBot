import { createContext, useContext, useState, useEffect } from "react";
import { createOrGetUser, initializeBasicData } from "@/utils/api";

const UserContext = createContext();

export const useUser = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error("useUser –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ UserProvider");
  }
  return context;
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const createMockUserData = () => ({
  id: 123456789,
  first_name: "John",
  last_name: "Doe",
  username: "johndoe",
  language_code: "ru",
  is_premium: false,
  photo_url: null,
  is_bot: false,
});

export const UserProvider = ({ children }) => {
  const [state, setState] = useState({
    // –î–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
    telegramUser: null,
    isTelegramLoaded: false,
    isInTelegram: false,

    // –î–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—à–µ–π –ë–î
    dbUser: null,
    isDbUserLoaded: false,

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
    isInitializing: true,
    error: null,

    // –§–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    isLocalDevelopment: false,
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const log = (message, data = null) => {
    console.log(`[UserContext] ${message}`, data || "");
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
  const isLocalhost = () => {
    if (typeof window === "undefined") return false;
    return (
      window.location.hostname === "localhost" ||
      window.location.hostname === "127.0.0.1" ||
      window.location.hostname === "::1"
    );
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const initializeApp = async () => {
      const isLocalDev = isLocalhost();

      if (isLocalDev) {
        log("üõ† –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const mockUserData = createMockUserData();

        setState((prev) => ({
          ...prev,
          telegramUser: mockUserData,
          isTelegramLoaded: true,
          isInTelegram: false, // –ù–µ –≤ Telegram, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          isLocalDevelopment: true,
        }));

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try {
          log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏)...");
          await initializeBasicData();

          log("–°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...");

          const dbUserData = await createOrGetUser({
            telegram_id: mockUserData.id,
            username: mockUserData.username,
            first_name: mockUserData.first_name,
          });

          log("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω –≤ –ë–î", dbUserData);

          setState((prev) => ({
            ...prev,
            dbUser: dbUserData,
            isDbUserLoaded: true,
            isInitializing: false,
          }));
        } catch (error) {
          log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)", error.message);

          setState((prev) => ({
            ...prev,
            error: error.message,
            isDbUserLoaded: true,
            isInitializing: false,
          }));
        }

        return;
      }

      // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Telegram
      log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...");

      if (
        typeof window !== "undefined" &&
        window.Telegram &&
        window.Telegram.WebApp
      ) {
        const { WebApp } = window.Telegram;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
        WebApp.ready();
        WebApp.expand();

        const userData = WebApp.initDataUnsafe.user;

        if (userData) {
          log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø–æ–ª—É—á–µ–Ω—ã", userData);

          setState((prev) => ({
            ...prev,
            telegramUser: userData,
            isTelegramLoaded: true,
            isInTelegram: true,
          }));

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
          try {
            log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏)...");
            await initializeBasicData();

            log("–°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...");

            const dbUserData = await createOrGetUser({
              telegram_id: userData.id,
              username: userData.username,
              first_name: userData.first_name,
            });

            log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω –≤ –ë–î", dbUserData);

            setState((prev) => ({
              ...prev,
              dbUser: dbUserData,
              isDbUserLoaded: true,
              isInitializing: false,
            }));
          } catch (error) {
            log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î", error.message);

            setState((prev) => ({
              ...prev,
              error: error.message,
              isDbUserLoaded: true,
              isInitializing: false,
            }));
          }
        } else {
          log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");

          setState((prev) => ({
            ...prev,
            isTelegramLoaded: true,
            isInTelegram: true,
            isInitializing: false,
          }));
        }
      } else {
        log("Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –≤ Telegram");

        setState((prev) => ({
          ...prev,
          isTelegramLoaded: true,
          isInTelegram: false,
          isInitializing: false,
        }));
      }
    };

    initializeApp();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
  const retryDbUser = async () => {
    if (!state.telegramUser) {
      log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏");
      return;
    }

    setState((prev) => ({ ...prev, error: null, isInitializing: true }));

    try {
      log("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...");

      const dbUserData = await createOrGetUser({
        telegram_id: state.telegramUser.id,
        username: state.telegramUser.username,
        first_name: state.telegramUser.first_name,
      });

      log(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω –≤ –ë–î (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
        dbUserData
      );

      setState((prev) => ({
        ...prev,
        dbUser: dbUserData,
        isDbUserLoaded: true,
        isInitializing: false,
        error: null,
      }));
    } catch (error) {
      log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Ä–∞–±–æ—Ç—ã —Å –ë–î", error.message);

      setState((prev) => ({
        ...prev,
        error: error.message,
        isInitializing: false,
      }));
    }
  };

  const value = {
    // –î–∞–Ω–Ω—ã–µ
    telegramUser: state.telegramUser,
    dbUser: state.dbUser,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    isTelegramLoaded: state.isTelegramLoaded,
    isDbUserLoaded: state.isDbUserLoaded,
    isInTelegram: state.isInTelegram,
    isInitializing: state.isInitializing,

    // –û—à–∏–±–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
    error: state.error,
    retryDbUser,

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
    isLocalDevelopment: state.isLocalDevelopment,

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
    isReady:
      state.isTelegramLoaded && state.isDbUserLoaded && !state.isInitializing,
    hasError: !!state.error,
    canUseApp:
      (state.isInTelegram || state.isLocalDevelopment) &&
      state.telegramUser &&
      state.dbUser,
  };

  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
};
